# -*- coding: utf-8 -*-
"""LiaPlus AI Prompt Engineer Intern Assignment

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oN24W6R2vszzb4A2ZYI_kepqx3AYZ33m
"""

!pip install gradio pandas numpy

import gradio as gr
import random
import datetime
from typing import Dict, List, Optional
import pandas as pd
import numpy as np

class LoanRecoveryBot:
    def __init__(self):

        self.conversation_history = []
        self.current_context = {}


        self.rbi_guidelines = {
            "fair_practices": [
                "Treat borrowers with dignity and respect",
                "No harassment or abusive practices",
                "Provide adequate notice",
                "Allow discussion of repayment options",
                "Maintain confidentiality"
            ],
            "communication_hours": {
                "start": "09:00",
                "end": "19:00"
            }
        }


        self.response_templates = {
            "greeting": [
                "Hello! I'm here to assist you with your finance-related queries.",
                "Welcome! How may I help you today?",
                "Hi there! I'm your XYZ Bank assistant. How can I help?"
            ],
            "understanding": [
                "I understand your situation. Let's work together to find a solution.",
                "I hear you, and I want to help you navigate through this.",
                "I appreciate you sharing this with me. Let's explore your options."
            ],
            "closing": [
                "Is there anything else I can help you with?",
                "Please don't hesitate to reach out if you need further assistance.",
                "Let me know if you have any other questions."
            ]
        }


        self.financial_knowledge = {
            "savings_account": """
            A savings account is a deposit account held at a bank or other financial institution that provides principal security and a modest interest rate.
            Benefits include liquidity, safety, and earning interest on idle funds.
            """,
            "investments": """
            Investments are assets purchased with the hope that they will generate income or appreciate in value over time.
            Common types include stocks, bonds, mutual funds, and real estate.
            Always assess your risk tolerance and investment goals before investing.
            """,
            "credit_cards": """
            Credit cards allow you to borrow money up to a certain limit to make purchases or withdraw cash.
            Key features include interest rates, credit limits, and rewards programs.
            Pay your balance in full each month to avoid interest charges.
            """,
            "insurance": """
            Insurance provides financial protection against unforeseen events such as accidents, illnesses, or property damage.
            Types include health insurance, life insurance, car insurance, and home insurance.
            Choose a policy based on your needs and coverage limits.
            """,
            "taxes": """
            Taxes are mandatory contributions imposed by the government on individuals and businesses.
            Common types include income tax, GST (Goods and Services Tax), and property tax.
            Plan your taxes early to maximize deductions and credits.
            """,
            "budgeting": """
            Budgeting involves creating a plan to manage your income and expenses effectively.
            Follow the 50/30/20 rule:
            - 50% for essential expenses (housing, food, utilities)
            - 30% for discretionary spending (entertainment, hobbies)
            - 20% for savings and debt repayment
            """,
            "retirement_planning": """
            Retirement planning involves setting aside funds to ensure financial independence after retirement.
            Start early and invest in retirement-focused instruments like PPF (Public Provident Fund) or NPS (National Pension System).
            Aim to save at least 15-20% of your income for retirement.
            """
        }

    def generate_loan_reminder(self, loan_details: Dict) -> str:
        """Generate personalized payment reminder"""
        amount_due = loan_details.get('amount_due', 0)
        days_overdue = loan_details.get('days_overdue', 0)

        reminder = f"""
        I hope you're doing well. I noticed that your EMI payment of ₹{amount_due:,} was due {days_overdue} days ago.

        I understand that managing payments can sometimes be challenging, and I'm here to help you explore options that might work better for your situation.

        We can:
        1. Set up a flexible payment plan
        2. Discuss EMI rescheduling options
        3. Look into loan restructuring possibilities

        Would you like to explore any of these options? I'm here to help find a solution that works for you.
        """
        return reminder.strip()

    def handle_payment_rescheduling(self, user_input: str) -> str:
        """Handle payment rescheduling requests"""
        response = """
        I understand you'd like to reschedule your payment. Let me help you with that.

        To provide you with the best options, could you please share:
        1. What's causing the difficulty with the current EMI?
        2. How long do you anticipate needing adjustment to your payment schedule?
        3. What would be a more manageable EMI amount for you?

        This will help me find the most suitable solution for your situation.
        """
        return response.strip()

    def generate_legal_notice(self, loan_details: Dict) -> str:
        """Generate legal notice with a compassionate but firm tone"""
        amount_due = loan_details.get('total_dues', 0)
        missed_payments = loan_details.get('missed_payments', 0)

        notice = f"""
        Important Notice Regarding Your Loan Account

        I need to bring to your attention that there are {missed_payments} missed payments totaling ₹{amount_due:,} on your loan account.

        While we may need to initiate legal proceedings as per bank policy, we strongly prefer to resolve this matter amicably. We have several options available:

        1. One-time settlement with flexible terms
        2. Customized repayment plan
        3. Loan restructuring options

        Please contact us within the next 7 days to discuss these options and avoid any legal proceedings. We're here to help find a solution that works for both parties.

        You can reach our recovery team at 1800-XXX-XXXX or respond here to discuss your options.
        """
        return notice.strip()

    def provide_financial_counseling(self, financial_info: Dict) -> str:
        """Provide personalized financial counseling"""
        monthly_income = financial_info.get('monthly_income', 0)
        current_emi = financial_info.get('current_emi', 0)

        counseling = f"""
        Thank you for seeking financial guidance. Let me help you create a sustainable financial plan.

        Based on your monthly income of ₹{monthly_income:,} and EMI of ₹{current_emi:,}, here's a recommended budget:

        1. Essential Expenses (50% of income):
           - EMI payments
           - Housing
           - Utilities
           - Food

        2. Savings and Debt Repayment (30%):
           - Emergency fund: Aim for 6 months of expenses
           - Additional loan payments when possible

        3. Personal Spending (20%):
           - Transportation
           - Entertainment
           - Personal care

        Would you like to:
        1. Get a detailed budget worksheet?
        2. Schedule a call with our financial advisor?
        3. Learn about debt consolidation options?
        """
        return counseling.strip()

    def handle_out_of_scope(self, query_type: str) -> str:
        """Handle queries outside loan recovery scope"""
        responses = {
            "personal_loan": """
            While I'm focused on helping with your current loan situation, I understand you're interested in personal loans.

            For detailed information about new personal loans, I can:
            1. Connect you with our personal loans team
            2. Share our personal loan calculator link
            3. Schedule a callback with a loan officer

            How would you like to proceed?
            """,
            "bank_policy": """
            I understand you have concerns about bank policies. While I'm specifically here to help with loan-related matters,
            I want to ensure your concerns are addressed properly.

            Would you prefer to:
            1. Speak with our customer service team
            2. File a formal feedback
            3. Schedule a branch visit
            """,
            "confidential_info": """
            I apologize, but I cannot share information about other customers' loans as it would violate banking confidentiality policies.
            I can only discuss details about your own loan account after proper verification.

            Is there something specific about your loan that you'd like to discuss?
            """
        }
        return responses.get(query_type, "I apologize, but I can only assist with loan-related queries. Would you like me to connect you with the appropriate department?").strip()

    def handle_finance_query(self, user_input: str) -> str:
        """Handle general finance-related queries"""
        input_lower = user_input.lower()


        if any(word in input_lower for word in ['savings', 'account']):
            return self.financial_knowledge['savings_account']
        elif any(word in input_lower for word in ['investment', 'stock', 'bond', 'mutual fund']):
            return self.financial_knowledge['investments']
        elif any(word in input_lower for word in ['credit card', 'card']):
            return self.financial_knowledge['credit_cards']
        elif any(word in input_lower for word in ['insurance', 'life', 'health', 'car', 'home']):
            return self.financial_knowledge['insurance']
        elif any(word in input_lower for word in ['tax', 'gst', 'income tax']):
            return self.financial_knowledge['taxes']
        elif any(word in input_lower for word in ['budget', 'spending', 'expense']):
            return self.financial_knowledge['budgeting']
        elif any(word in input_lower for word in ['retirement', 'pension', 'ppf', 'nps']):
            return self.financial_knowledge['retirement_planning']
        else:
            return "I currently don't have specific information on that topic. Could you clarify or ask about another finance-related query?"

def process_user_input(user_input: str, bot_instance: LoanRecoveryBot) -> str:
    """Process user input and generate appropriate response"""

    input_lower = user_input.lower()


    sample_loan = {
        'amount_due': 25000,
        'days_overdue': 30,
        'missed_payments': 2,
        'total_dues': 50000
    }


    sample_financial = {
        'monthly_income': 50000,
        'current_emi': 15000
    }


    if any(word in input_lower for word in ['cannot pay', "can't pay", 'unable to pay']):
        return bot_instance.handle_payment_rescheduling(user_input)
    elif any(word in input_lower for word in ['reminder', 'payment due']):
        return bot_instance.generate_loan_reminder(sample_loan)
    elif any(word in input_lower for word in ['legal', 'notice', 'action']):
        return bot_instance.generate_legal_notice(sample_loan)
    elif any(word in input_lower for word in ['advice', 'help', 'guidance', 'counseling']):
        return bot_instance.provide_financial_counseling(sample_financial)
    elif 'personal loan' in input_lower:
        return bot_instance.handle_out_of_scope('personal_loan')
    elif any(word in input_lower for word in ['policy', 'complaint']):
        return bot_instance.handle_out_of_scope('bank_policy')
    elif any(word in input_lower for word in ['other', 'another customer']):
        return bot_instance.handle_out_of_scope('confidential_info')
    elif any(word in input_lower for word in ['finance', 'money', 'saving', 'invest', 'tax', 'insurance', 'retirement']):
        return bot_instance.handle_finance_query(user_input)
    else:
        return random.choice(bot_instance.response_templates['understanding']) + "\n\nCould you please provide more details about your query?"


bot_instance = LoanRecoveryBot()


def respond(message, history):
    bot_response = process_user_input(message, bot_instance)
    return bot_response


custom_css = """
.gradio-container {
    max-width: 800px !important;
    margin: auto !important;
}
.message-wrap {
    max-width: 700px !important;
}
.message.user {
    background-color: #2563EB !important; /* Blue for user messages */
    color: white !important; /* White text for user messages */
    border-radius: 10px !important; /* Rounded corners */
    padding: 10px !important; /* Padding for better spacing */
}
.message.bot {
    background-color: #4CAF50 !important; /* Green for bot responses */
    color: white !important; /* White text for bot responses */
    border-radius: 10px !important; /* Rounded corners */
    padding: 10px !important; /* Padding for better spacing */
}
"""


with gr.Blocks(css=custom_css) as demo:
    gr.Markdown(
    """
    # XYZ Bank Loan Recovery Assistant
    Welcome to XYZ Bank's AI-powered loan assistance system. I'm here to help you with:
    - Loan payment inquiries
    - Payment rescheduling
    - Financial counseling
    - General finance-related queries

    How may I assist you today?
    """)

    chatbot = gr.Chatbot(
        [],
        elem_id="chatbot",
        bubble_full_width=False,
        avatar_images=(None, "https://api.dicebear.com/7.x/bottts/svg?seed=xyz-bank")
    )

    msg = gr.Textbox(
        placeholder="Type your message here...",
        label="Your Message",
        show_label=False
    )

    clear = gr.Button("Clear Conversation")

    def user(user_message, history):
        return "", history + [[user_message, None]]

    def bot_response(history):
        user_message = history[-1][0]
        bot_message = process_user_input(user_message, bot_instance)
        history[-1][1] = bot_message
        return history

    msg.submit(user, [msg, chatbot], [msg, chatbot], queue=False).then(
        bot_response, chatbot, chatbot
    )

    clear.click(lambda: None, None, chatbot, queue=False)

    gr.Examples(
        examples=[
            "I can't pay my EMI this month",
            "I need a payment reminder",
            "Can you help me with financial advice?",
            "What is a savings account?",
            "How do I plan for retirement?",
            "What happens if I miss payments?",
            "I want to apply for a personal loan",
        ],
        inputs=msg,
    )


demo.launch(share=True, debug=True)

print("The chatbot interface is now running. You can interact with it in the browser window that opens.")